TigerLily
=========

Installing
----------
TigerLily requires Perl 5 with the Curses module.  Color support requires
a version of curses which supports color; I recommend ncurses.  Please
note that curses color handling is atrocious at best, and unspeakable at
worst -- any color problems you experience are probably the fault of
your curses.

To create a usable tlily executable, run the command:
   perl Build.PL
To see the full usage for Build.PL, run the command:
   perl Build.PL -h


Configuration (To be expanded)
-------------

TigerLily now has 4 levels of customization:
    Level    Default File Location
             Description
    -----    ---------------------
    Global   /usr/local/lib/tlily/tlily.cf
             Default settings for all features; please no not edit except
             when developing.
    Site     /usr/local/etc/tlily.cf
             Site-specific settings to augment or override the global
             settings.  System Administrators wishing to change the
             default settings for their users should edit this file.
    User     ~/.lily/tlily/tlily.cf
             User-specific settings to override the global and site
             settings.
    Command  <no file>
             Many(not all) configuration options can be overridden at the
             command line.

Here is a summary of the common configuration file(CF) options:

@load
	Setting this variable in a CF will change the list of
	extensions to load.  An extension preceeded by a - will
	cause that extension to not be loaded.  
	    # Example:
	    @load = ('a', 'b', '-c', 'd', '-e');
	    # In addition to the current extension list, extensions a, b,
	    # and d will be loaded, and extensions c and e will not be loaded.
	The default extension list is in the global CF, and can be
	changed using this method in the site and/or user CFs.

%color_attrs
%mono_attrs
	Setting these variables in a cf will change the color settings
	for the color and monochrome mode of an element.
	    # Example:
	    %color_attrs = ('pubhdr' =>  ['bg:blue', 'fg:red', 'bold'],
	                    'privmsg' => ['fg:cyan', 'bg:green']);
	    # Make all public message headers red on blue and bold, and
	    # make all private messages green on cyan.  The color attributes
	    # for other elements will be unchanged.
	    %mono_attrs = ('pubmsg' => ['reverse'],
			   'statusline' => ['bold']);
            # Make all public messages be in reverse video (black on white),
            # and make the statusline be normal(white on black) with the text
            # in bold.  The monochrome attributes for other elements will be
            # unchanged.

@slash
	Setting this variable will change the list of /-commands that are
	allowed to be intercepted by tlily and other extensions in order
	to add functionality to an existing command.  Any extension wanting
	to intercept a /-command must honor their desired command's
	existence/non-existence in this list.  Adding a /-command to this
	list will not necessarily enable interception of the /-command;
	the extension that wants to intercept it must be loaded also.
	    # Example:
	    @slash = ('-info', 'also', 'oops');
	    # In addition to the slash list from previous CF levels,
	    # allow /also and /oops to be intercepted, but do not
	    # allow /info to be overridden.
	By default, no slash commands will be allowed to be intercepted.  This
	can be overridden in the site and/or user CFs using this method.
	
Extensions can each have options to configure them; see the documentation
for the specific module to see what options can be set.


CVS access
----------
The TigerLily sources are stored in a CVS repository.  Anyone working on
TigerLily development can get access by contacting Damien (neild@acm.rpi.edu).
The repository is currently located on zorg.hitchhiker.org.

To access the repository remotely, you will need to set two environment
variables:
  export CVSROOT=:ext:neild@zorg.hitchhiker.org:/usr/src/cvs
  export CVS_RSH=ssh

Obviously, replace the `neild' with your own userid on zorg.  CVS_RSH need
not necessarily be ssh, but this is likely to be the simplest method to use.

The important CVS commands are:
  - cvs checkout tlily
    This will grab a copy of the current source tree, and place it in a
    new directory named `tlily'.  No locking is implied by this operation;
    you may delete the checked out tree without ill effect.

All other CVS commands accept a list of files as an argument; in the absence
of this list, they operate on the current directory.

  - cvs update
    Compares a checked out tree to the current sources.

  - cvs add
    Registers a new file into the repository.

  - cvs remove
    Removes a file from the repository.

  - cvs commit
    Checks in all changes in the current tree.

Read the CVS manpages for more detailed information.
